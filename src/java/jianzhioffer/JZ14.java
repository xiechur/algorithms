//package jianzhioffer;
//
//
//import java.util.LinkedList;
//import java.util.Queue;
//
///**
// * 剑指 Offer 14- I. 剪绳子
// * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
// *
// * 示例 1：
// *
// * 输入: 2
// * 输出: 1
// * 解释: 2 = 1 + 1, 1 × 1 = 1
// * 示例 2:
// *
// * 输入: 10
// * 输出: 36
// * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
// * 提示：
// *
// * 2 <= n <= 58
// *
// *剑指 Offer 14- II. 剪绳子 II
// * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
// *
// * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
// *
// *
// *
// * 示例 1：
// *
// * 输入: 2
// * 输出: 1
// * 解释: 2 = 1 + 1, 1 × 1 = 1
// * 示例 2:
// *
// * 输入: 10
// * 输出: 36
// * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
// *
// *
// * 提示：
// *
// * 2 <= n <= 1000
// *
// */
//public class JZ14 {
//
//    /**
//     * 剑指 Offer 14- I. 剪绳子
//     *
//     * 分析： 利用均值不等式求得当每段绳子长度为 e时，乘积数最大。y  = (n/x)^x 取对数得到 图像  lnx/x  证明得到x = n/e 时 y最大
//     *  n<=3时，切为 1，n-1
//     *  n>3时， 平均分段每段长度为3时成绩最大  n = 3a+b;
//     *      b = 0,res = 3^a
//     *      b = 1,res = 3^a-1 * 2 * 2
//     *      b = 2,res = 3^a * 2
//     *
//     * @param n
//     * @return
//     */
//    public int cuttingRope(int n) {
//        if (n<=3) {
//            // 切除长度为 1的绳子
//            return n - 1;
//        }
//        int a = n/3,b = n%3;
//        if (b == 0) {
//            // 可以平均分多段，长度为3
//            return (int)Math.pow(3,a);
//        }else if (b == 1) {
//            // 3+1 = 2+2  最大成绩是4
//            // 可以分成(a-1)个3  2个2
//            return (int)Math.pow(3,a-1) * 4;
//
//        } else if (b == 2) {
//            // 可以分成a个3，1个2
//            return (int)Math.pow(3,a)*2;
//        }
//        return 0;
//    }
//    /**
//     * 剑指 Offer 14- II. 剪绳子
//     *
//     */
//    public int cuttingRope2(int n) {
//        if (n<=3) {
//            // 切除长度为 1的绳子
//            return n - 1;
//        }
//        long res=0;
//        int a = n/3,b = n%3;
//        if (b == 0) {
//            // 可以平均分多段，长度为3
//            res = (long)Math.pow(3,a) % 1000000007;
//        }else if (b == 1) {
//            // 3+1 = 2+2  最大成绩是4
//            // 可以分成(a-1)个3  2个2
//            res = (long)Math.pow(3,a-1) * 4 % 1000000007;
//
//        } else if (b == 2) {
//            // 可以分成a个3，1个2
//            res = (long)Math.pow(3,a)*2 % 1000000007;
//        }
//        return (int)res;
//    }
//
//    public static void main(String[] args) {
//        JZ14 jz = new JZ14();
//        int s = jz.cuttingRope(100);
//        System.out.println(s);
//
//    }
//
//}
